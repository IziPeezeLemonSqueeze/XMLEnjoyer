// src-electron/electron-preload.js
var import_electron = require("electron");
import_electron.contextBridge.exposeInMainWorld("myAPI", {
  quitApp: () => {
    import_electron.ipcRenderer.invoke("quit-app");
  },
  minimizeApp: () => {
    import_electron.ipcRenderer.invoke("min-app");
  },
  maximizeApp: () => {
    import_electron.ipcRenderer.invoke("max-app");
  },
  savePackage: (value) => {
    import_electron.ipcRenderer.invoke("save-package", value);
  },
  getAuthList: async () => {
    return await import_electron.ipcRenderer.invoke("auth-list");
  },
  logoutOrg: (value) => {
    import_electron.ipcRenderer.invoke("logout-org", value);
  },
  loginOrg: async (value) => {
    return await import_electron.ipcRenderer.invoke("login-org", value);
  },
  interruptLogin: () => {
    import_electron.ipcRenderer.invoke("interrupt-login");
  },
  retrieveMetadata: async (value) => {
    return await import_electron.ipcRenderer.invoke("retrieve-metadata", value);
  },
  getExternalClipboard: async () => {
    return await import_electron.ipcRenderer.invoke("get-clipboard");
  },
  checkSfdxUpdate: async () => {
    return await import_electron.ipcRenderer.invoke("check-sfdx-update");
  },
  checkCliSFIstalled: async () => {
    return await import_electron.ipcRenderer.invoke("check-cli-installed");
  }
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjLWVsZWN0cm9uL2VsZWN0cm9uLXByZWxvYWQuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8qKlxyXG4gKiBUaGlzIGZpbGUgaXMgdXNlZCBzcGVjaWZpY2FsbHkgZm9yIHNlY3VyaXR5IHJlYXNvbnMuXHJcbiAqIEhlcmUgeW91IGNhbiBhY2Nlc3MgTm9kZWpzIHN0dWZmIGFuZCBpbmplY3QgZnVuY3Rpb25hbGl0eSBpbnRvXHJcbiAqIHRoZSByZW5kZXJlciB0aHJlYWQgKGFjY2Vzc2libGUgdGhlcmUgdGhyb3VnaCB0aGUgXCJ3aW5kb3dcIiBvYmplY3QpXHJcbiAqXHJcbiAqIFdBUk5JTkchXHJcbiAqIElmIHlvdSBpbXBvcnQgYW55dGhpbmcgZnJvbSBub2RlX21vZHVsZXMsIHRoZW4gbWFrZSBzdXJlIHRoYXQgdGhlIHBhY2thZ2UgaXMgc3BlY2lmaWVkXHJcbiAqIGluIHBhY2thZ2UuanNvbiA+IGRlcGVuZGVuY2llcyBhbmQgTk9UIGluIGRldkRlcGVuZGVuY2llc1xyXG4gKlxyXG4gKiBFeGFtcGxlIChpbmplY3RzIHdpbmRvdy5teUFQSS5kb0FUaGluZygpIGludG8gcmVuZGVyZXIgdGhyZWFkKTpcclxuICpcclxuICogICBpbXBvcnQgeyBjb250ZXh0QnJpZGdlIH0gZnJvbSAnZWxlY3Ryb24nXHJcbiAqXHJcbiAqICAgY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZCgnbXlBUEknLCB7XHJcbiAqICAgICBkb0FUaGluZzogKCkgPT4ge31cclxuICogICB9KVxyXG4gKi9cclxuaW1wb3J0IHsgY29udGV4dEJyaWRnZSwgaXBjUmVuZGVyZXIgfSBmcm9tIFwiZWxlY3Ryb25cIjtcclxuXHJcblxyXG5cclxuY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZChcIm15QVBJXCIsIHtcclxuXHJcbiAgcXVpdEFwcDogKCkgPT5cclxuICB7XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoXCJxdWl0LWFwcFwiKVxyXG4gIH0sXHJcblxyXG4gIG1pbmltaXplQXBwOiAoKSA9PlxyXG4gIHtcclxuICAgIGlwY1JlbmRlcmVyLmludm9rZShcIm1pbi1hcHBcIilcclxuICB9LFxyXG5cclxuICBtYXhpbWl6ZUFwcDogKCkgPT5cclxuICB7XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoXCJtYXgtYXBwXCIpXHJcbiAgfSxcclxuXHJcbiAgc2F2ZVBhY2thZ2U6ICh2YWx1ZSkgPT5cclxuICB7XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoXCJzYXZlLXBhY2thZ2VcIiwgdmFsdWUpXHJcbiAgfSxcclxuXHJcblxyXG4gIGdldEF1dGhMaXN0OiBhc3luYyAoKSA9PlxyXG4gIHtcclxuICAgIHJldHVybiBhd2FpdCBpcGNSZW5kZXJlci5pbnZva2UoJ2F1dGgtbGlzdCcpXHJcbiAgfSxcclxuXHJcbiAgbG9nb3V0T3JnOiAodmFsdWUpID0+XHJcbiAge1xyXG4gICAgaXBjUmVuZGVyZXIuaW52b2tlKCdsb2dvdXQtb3JnJywgdmFsdWUpO1xyXG4gIH0sXHJcblxyXG4gIGxvZ2luT3JnOiBhc3luYyAodmFsdWUpID0+XHJcbiAge1xyXG4gICAgcmV0dXJuIGF3YWl0IGlwY1JlbmRlcmVyLmludm9rZSgnbG9naW4tb3JnJywgdmFsdWUpO1xyXG4gIH0sXHJcblxyXG4gIGludGVycnVwdExvZ2luOiAoKSA9PlxyXG4gIHtcclxuICAgIGlwY1JlbmRlcmVyLmludm9rZSgnaW50ZXJydXB0LWxvZ2luJyk7XHJcbiAgfSxcclxuXHJcbiAgcmV0cmlldmVNZXRhZGF0YTogYXN5bmMgKHZhbHVlKSA9PlxyXG4gIHtcclxuICAgIHJldHVybiBhd2FpdCBpcGNSZW5kZXJlci5pbnZva2UoJ3JldHJpZXZlLW1ldGFkYXRhJywgdmFsdWUpO1xyXG4gIH0sXHJcblxyXG4gIGdldEV4dGVybmFsQ2xpcGJvYXJkOiBhc3luYyAoKSA9PlxyXG4gIHtcclxuICAgIHJldHVybiBhd2FpdCBpcGNSZW5kZXJlci5pbnZva2UoJ2dldC1jbGlwYm9hcmQnKTtcclxuICB9LFxyXG5cclxuICBjaGVja1NmZHhVcGRhdGU6IGFzeW5jICgpID0+XHJcbiAge1xyXG4gICAgcmV0dXJuIGF3YWl0IGlwY1JlbmRlcmVyLmludm9rZSgnY2hlY2stc2ZkeC11cGRhdGUnKTtcclxuICB9LFxyXG5cclxuICBjaGVja0NsaVNGSXN0YWxsZWQ6IGFzeW5jICgpID0+XHJcbiAge1xyXG4gICAgcmV0dXJuIGF3YWl0IGlwY1JlbmRlcmVyLmludm9rZSgnY2hlY2stY2xpLWluc3RhbGxlZCcpO1xyXG4gIH1cclxuXHJcblxyXG59KTtcclxuXHJcbi8qIGlwY1JlbmRlcmVyLm9uKCdhdXRoLWxpc3QtcmVhZGVkJywgKGUsIGRhdGEpID0+XHJcbntcclxuICBjb25zb2xlLmxvZyhkYXRhKVxyXG4gIGNvbnN0IF9kYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICBpZiAoX2RhdGEuc3RhdHVzID09IDApXHJcbiAge1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ29yZ3NTZXR0aW5nJywgSlNPTi5zdHJpbmdpZnkoX2RhdGEucmVzdWx0KSlcclxuICB9XHJcbn0pOyAqL1xyXG4vKlxyXG5pcGNSZW5kZXJlci5vbignbWR0LXJldHJpZXZlZCcsIChlLCBkYXRhKSA9PlxyXG57XHJcbiAgY29uc29sZS5sb2coJ1VQREFURSBNRFQnKVxyXG4gIGNvbnN0IF9kYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICBpZiAoX2RhdGEuc3RhdHVzID09IDApXHJcbiAge1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ01EVF9URU1QJywgX2RhdGEucmVzdWx0KTtcclxuICB9XHJcbn0pOyAqL1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBaUJBLHNCQUEyQztBQUkzQyw4QkFBYyxrQkFBa0IsU0FBUztBQUFBLEVBRXZDLFNBQVMsTUFDVDtBQUNFLGdDQUFZLE9BQU8sVUFBVTtBQUFBLEVBQy9CO0FBQUEsRUFFQSxhQUFhLE1BQ2I7QUFDRSxnQ0FBWSxPQUFPLFNBQVM7QUFBQSxFQUM5QjtBQUFBLEVBRUEsYUFBYSxNQUNiO0FBQ0UsZ0NBQVksT0FBTyxTQUFTO0FBQUEsRUFDOUI7QUFBQSxFQUVBLGFBQWEsQ0FBQyxVQUNkO0FBQ0UsZ0NBQVksT0FBTyxnQkFBZ0IsS0FBSztBQUFBLEVBQzFDO0FBQUEsRUFHQSxhQUFhLFlBQ2I7QUFDRSxXQUFPLE1BQU0sNEJBQVksT0FBTyxXQUFXO0FBQUEsRUFDN0M7QUFBQSxFQUVBLFdBQVcsQ0FBQyxVQUNaO0FBQ0UsZ0NBQVksT0FBTyxjQUFjLEtBQUs7QUFBQSxFQUN4QztBQUFBLEVBRUEsVUFBVSxPQUFPLFVBQ2pCO0FBQ0UsV0FBTyxNQUFNLDRCQUFZLE9BQU8sYUFBYSxLQUFLO0FBQUEsRUFDcEQ7QUFBQSxFQUVBLGdCQUFnQixNQUNoQjtBQUNFLGdDQUFZLE9BQU8saUJBQWlCO0FBQUEsRUFDdEM7QUFBQSxFQUVBLGtCQUFrQixPQUFPLFVBQ3pCO0FBQ0UsV0FBTyxNQUFNLDRCQUFZLE9BQU8scUJBQXFCLEtBQUs7QUFBQSxFQUM1RDtBQUFBLEVBRUEsc0JBQXNCLFlBQ3RCO0FBQ0UsV0FBTyxNQUFNLDRCQUFZLE9BQU8sZUFBZTtBQUFBLEVBQ2pEO0FBQUEsRUFFQSxpQkFBaUIsWUFDakI7QUFDRSxXQUFPLE1BQU0sNEJBQVksT0FBTyxtQkFBbUI7QUFBQSxFQUNyRDtBQUFBLEVBRUEsb0JBQW9CLFlBQ3BCO0FBQ0UsV0FBTyxNQUFNLDRCQUFZLE9BQU8scUJBQXFCO0FBQUEsRUFDdkQ7QUFHRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
